#+TITLE: My Emacs config
#+Author: elpachongco
* Introduction
My goal with emacs is to create a productivity environment. Mainly, I'd
like it to do basic ide functions. Some other functions that I can't live
without are
- Remote file editing (TRAMP)
** Dependencies
Here are the dependencies that most likely will not be installed automatically.
- Nodejs >= 12, npm
- typescript-language-server. Install with `npm -g install typescript-language-
server`.
- eslint
- pylint
* Pre-config
** Package manager - use-package.el
Use use-package and add melpa as a repository
#+BEGIN_SRC emacs-lisp
	;;(require 'package)
	(setq package-enable-at-startup nil)
	(add-to-list 'package-archives
		'("melpa" . "https://melpa.org/packages/") t)
	;;(package-initialize) < already called
	(unless (package-installed-p 'use-package)
		(package-refresh-contents)
		(package-install 'use-package))                                     

#+END_SRC

** Allow trying packages - try.el
	Try allows the download and install of packages for the current session
	only.
	#+BEGIN_SRC emacs-lisp
		(use-package try :ensure t)
	#+END_SRC
	
* Navigation

** Better C-x o - ace-window.el o-
	#+begin_src emacs-lisp
		;; Show numbers when doing C-x o
	  ;;  (use-package ace-window
	  ;; :ensure t
	  ;; :init
	  ;;   (global-set-key [remap other-window] 'ace-window)
	  ;;   (custom-set-faces
	  ;;    '(aw-leading-char-face
	  ;;      ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	  ;;   )

	#+end_src

** Enable scrolling by line, without moving pointer
	#+begin_src emacs-lisp
	(setq scroll-preserve-screen-position 1)
	(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
	(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
	#+end_src

* Performance
Most of these I got from the emacs-lsp performance
page.
** Turn up Emacs Garbage collector  
The garbage collector cons threshold is set by default on my machine 
to 800kb, try to turn this value up since I have enough memory for it 
on my server.

#+begin_src emacs-lisp
  ;; (setq gc-cons-threshold 100000000)
#+end_src

Also helpful for making emacs startup fast.

** Set Amount of data emacs reads from processes
Default is 4096 bytes.
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

** JIT Settings
#+begin_src emacs-lisp

  (setq jit-lock-stealth-time 1)
  (setq jit-lock-chunck-size 500)
  (setq jit-lock-defer-time 0.5)

#+end_src
* Quality of life Improvements
** ido-mode, icomplete, ibuffer
	#+begin_src emacs-lisp
	(setq ido-enable-flex-matching t)
	(setq ido-everywhere 1)
	(ido-mode 1)
	(icomplete-mode 1) 
	(defalias 'list-buffers 'ibuffer) ; Make ibuffer default
	#+end_src
	
** Change startup buffer to ~/Personal/todo.org

	#+begin_src emacs-lisp
	(setq initial-buffer-choice "~/Personal/todo.org")
	#+end_src

** Auto update buffers when file updates
	#+begin_src emacs-lisp
	(global-auto-revert-mode t)
	#+end_src

** Disable dialog boxes
	#+begin_src emacs-lisp
	(setq use-dialog-box nil) 
	#+end_src

** Only use y or n instead of yes, no, y, n
	#+begin_src emacs-lisp
	(fset 'yes-or-no-p 'y-or-n-p)
	#+end_src

** Enable every deactivated command
	#+begin_src emacs-lisp
	(setq disabled-command-function nil)
	#+end_src

** Better help - helpful.el, also remap keys for helpful
	#+begin_src emacs-lisp
	(use-package helpful
  :ensure t)

	(global-set-key (kbd "C-h f") #'helpful-callable)
;; (global-set-key (kbd "C-h f") #'helpful-function)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)

;; Set help buffers to display in current buffer
(add-to-list 'display-buffer-alist
             '("*Help*" display-buffer-same-window))
;; Lookup the current symbol at point. C-c C-d is a common keybinding
;; for this in lisp modes.
(global-set-key (kbd "C-c C-d") #'helpful-at-point)

;; Look up *F*unctions (excludes macros).
;;
;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
;; already links to the manual, if a function is referenced there.
(global-set-key (kbd "C-h F") #'helpful-function)

;; Look up *C*ommands.
;;
;; By default, C-h C is bound to describe `describe-coding-system'. I
;; don't find this very useful, but it's frequently useful to only
;; look at interactive functions.
(global-set-key (kbd "C-h C") #'helpful-command)

	#+end_src

** Allow restoration of window layouts
	#+begin_src emacs-lisp
	(winner-mode 1)
	#+end_src

** Set a different directory for backups and autosaves

	#+begin_src emacs-lisp
		(setq backup-directory-alist
	`((".*" . ,"~/.backups-emacs/")))
	(setq auto-save-file-name-transforms
	`((".*" ,"~/.backups-emacs/" t)))
	#+end_src

** TODO Automatically choose indentation between spaces or tabs based on the file

** Fix Comment DWIM 
#+begin_src emacs-lisp
(defun my-comment-dwim ()
  (interactive)
  (if (use-region-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position)
                                 (line-end-position))))

(global-set-key (kbd "M-;") 'my-comment-dwim)
#+end_src
* Programming & Development
** General Settings
*** Parens-related settings
	 #+begin_src emacs-lisp
			 ;; Smartparens
			 (use-package smartparens
			 :ensure t
			 :init)
			 (smartparens-global-mode 1)
			 ;;(show-smartparens-global-mode 1)
			 ;; ^ This is now replaced by highlight-parentheses mode
	 
			 ;; Highlight parens
			 (show-paren-mode -1)
		(use-package highlight-parentheses
		  :ensure t :init)

		;; turn it on when in prog-mode
		;;(add-hook 'prog-mode-hook #'highlight-parentheses-mode)

		;; Enable for minibuffer
		(add-hook 'minibuffer-setup-hook #'highlight-parentheses-minibuffer-setup)
		;; Enable global mode
		(global-highlight-parentheses-mode 1)
	 #+end_src
*** Prettify symbols
	 #+begin_src emacs-lisp
	 (global-prettify-symbols-mode 1)
	 #+end_src

*** Autocompletion
	 #+begin_src emacs-lisp
		(use-package company
		:ensure t
		:init)
		;; Set delay for completion to low
		(setq company-tooltip-idle-delay 0.1)
		(setq company-idle-delay 0.08)
		(add-hook 'after-init-hook 'global-company-mode)

	 #+end_src

*** Add a column rule of 80
I follow this rule for almost all documents except HTML.
	#+begin_src emacs-lisp
		(column-number-mode 1)
		(setq-default fill-column 80)
		;; Enable automatically on prog mode
		(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode) 
		;;(global-display-fill-column-indicator-mode 80)
		;;(display-fill-column-indicator-mode 80)
	#+end_src
*** Set indents to tabs and set tab width
Tabs are better than spaces, it respects the other user's
indentation settings (tab-width).
	#+begin_src emacs-lisp
		(setq indent-tabs-mode 1)
		(setq-default tab-width 3)
	#+end_src
*** Initialize lsp, Eglot Only initialize.
	 Each language gets an org heading. File extension
	 handling (hooks) and other language-specific
	 settings will be handled in the language's specific
	 header below.

	 #+begin_src emacs-lisp
		  ;(use-package eglot :ensure t)
	 #+end_src

*** LSP: emacs-lsp instead of eglot
#+begin_src emacs-lisp
  (use-package lsp-mode
		:ensure t
		:init
		;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
		;; (setq lsp-keymap-prefix "C-c l")
		(setq lsp-keymap-prefix "M-l")
		:hook (
				  (go-mode . lsp)
				  (typescript-mode . lsp)
				  (python-mode . lsp)
				  (web-mode . lsp))
		:commands lsp)

  (setq lsp-headerline-breadcrumb-enable nil) 
  (use-package which-key
		:ensure t
		:config
		(which-key-mode))

  (with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
  (setq which-key-idle-delay 0.2)
#+end_src

*** LSPUI
#+begin_src emacs-lisp
	 ;; optionally
	 (use-package lsp-ui :ensure t :commands lsp-ui-mode
	 :config (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions) 
	 (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
	 ) 
	 (setq lsp-ui-doc-position "At point")
	 #+end_src

*** Evil mode
I'm okay with the default emacs keybindings because of [[http://ergoemacs.org/emacs/swap_CapsLock_Ctrl.html][this]]. But I believe
Vim keybindings are easier to use plus I don't have to add tons of other
plugins to make emacs do text editing as good as vi.

#+Begin_src emacs-lisp
  (use-package evil
  :ensure t)
  (evil-mode 1)
  ;; This makes C-[ (escape) work when evil-mode is called
  (setq evil-intercept-esc 'always)

  ;; Set tab to org cycle when in org mode, not evil tab
	 (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) 
	 (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle) 
  ;; Set default state for buffers depending on major mode
	 (evil-set-initial-state 'dired-mode 'normal)
	 (evil-set-initial-state 'eshell-mode 'emacs)
	 (evil-set-initial-state 'shell-mode 'emacs)

  ;; Set evil to change cursor when in terminal mode 
	(use-package evil-terminal-cursor-changer
	:ensure t)
  (unless (display-graphic-p)
			 (require 'evil-terminal-cursor-changer)
			 (evil-terminal-cursor-changer-activate) ; or (etcc-on)
			 )


#+end_src

*** Show line number when in prog-mode
	 #+begin_src emacs-lisp
	 (add-hook 'prog-mode-hook 'display-line-numbers-mode)
	 #+end_src
*** Put pipes on tabs to differentiate it from spaces

This was taken from [[https://dougie.io/emacs/indentation/][this website.]]

	 #+begin_src emacs-lisp 
		  (setq whitespace-style '(face tabs tab-mark))
		  (custom-set-faces
		  '(whitespace-tab ((t (:foreground "#636363")))))
		  (setq whitespace-display-mappings
		  '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
		  (global-whitespace-mode) ; Enable whitespace mode everywhere
	 #+end_src

*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src
*** Flycheck tooltips
#+begin_src emacs-lisp
	 (use-package flycheck-pos-tip :ensure t)
	 (with-eval-after-load 'flycheck
	 (flycheck-pos-tip-mode))

#+end_src
*** Don't Truncate lines  
	#+begin_src emacs-lisp
	  (add-hook 'prog-mode-hook 'toggle-truncate-lines) 
	#+end_src
** Version Control
** Web mode and file associations
	#+begin_src emacs-lisp
	(use-package web-mode
	:ensure t)

  ;; Web mode when editing html
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	;; Web mode when editing other formats
	(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
	#+end_src
** Typescript
*** Typescript mode
	 #+begin_src emacs-lisp
	 (use-package typescript-mode
	 :ensure t)
	 ;(add-hook 'typescript-mode-hook 'eglot-ensure)
	 (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
	 (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
	 #+end_src

*** Tide mode
;;	 #+begin_src emacs-lisp
;;	 (use-package tide
;;  :ensure t)
;;(defun setup-tide-mode ()
;;  (interactive)
;;  (tide-setup)
;;  (flycheck-mode +1)
;;  (setq flycheck-check-syntax-automatically '(save mode-enabled))
;;  (eldoc-mode +1)
;;  (tide-hl-identifier-mode +1)
;;  (company-mode +1))
;;
;;;; aligns annotation to the right hand side
;;(setq company-tooltip-align-annotations t)
;;;; formats the buffer before saving
;;(add-hook 'before-save-hook 'tide-format-before-save)
;;(add-hook 'typescript-mode-hook 'setup-tide-mode)
;;;;(add-hook 'typescript-mode-hook #'setup-tide-mode)
;; #+end_src

*** Typescript React - *.tsx hook
;;	 #+begin_src emacs-lisp
;;	 ;; For editing TSX files
;;	 (require 'web-mode)
;;	 (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
;;	 (add-hook 'web-mode-hook
;;	    (lambda ()
;;       (when (string-equal "tsx" (file-name-extension buffer-file-name))
;;       (setup-tide-mode))))
;;		 ;; enable typescript-tslint checker
;;		 (flycheck-add-mode 'typescript-tslint 'web-mode)
;;
;;	 #+end_src

** Python
Make sure `pylint`, and `python-lsp-server` are installed.
#+begin_src emacs-lisp
;(add-hook 'python-mode-hook 'eglot-ensure)
#+end_src

** Go 
	#+begin_src emacs-lisp
	 (use-package go-mode
	 :ensure t) 
	 ;(add-hook 'go-mode-hook 'eglot-ensure)
	#+end_src
** Org
	
	#+begin_src emacs-lisp
	;; Allow <s shortcuts
	(require 'org-tempo)
	 (global-set-key (kbd "C-c l") #'org-store-link)
	#+end_src
*** Agenda
	 #+begin_src emacs-lisp
	 (global-set-key (kbd "C-c a") #'org-agenda)
	 #+end_src
*** Capture
	 #+begin_src emacs-lisp
	 (global-set-key (kbd "C-c c") #'org-capture)
	 #+end_src

	 Set capture templates, this was taken form [[https://orgmode.org/manual/Capture-templates.html][the org guide]].

	 #+begin_src emacs-lisp
	 (setq org-capture-templates
		  '(("t" "Todo" entry (file+headline "~/Personal/todo.org" "Tasks")
				"* TODO %?\n  %i\n  %a")
				("j" "Journal" entry (file+datetree "~/Personal/journal.org")
				"* %?\nEntered on %U\n  %i\n  %a")))

	 #+end_src
	 
* Visual Customizations
** Higlight line where cursor is at
	#+begin_src emacs-lisp
	(global-hl-line-mode 1)
	#+end_src

** Change cursor (pointer) type from bar
	#+begin_src 
	(customize-set-variable 'cursor-type 'box)	
	#+end_src
** Disable cursor blinking
	#+begin_src emacs-lisp
	  ;;(blink-cursor-mode 0)
	  (setq blink-cursor-blinks 0)
	#+end_src
** Disable tool, scroll, menu bars, and startup-message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC 

** Theme 
	#+begin_src emacs-lisp
	  ;; DARK
	  (use-package gruber-darker-theme
	  :ensure t )
	  (load-theme 'gruber-darker t)

	  ;; LIGHT
	  ;;(use-package )
	#+end_src

*** TODO Set fringe bg color same as background color of theme
*** TODO Find out why emacs-lisp is colored gray inside of code blocks in org babel
** Font face 
	#+begin_src emacs-lisp
	  ;; Set font for all frames
	  (set-frame-font "IBM Plex Mono:pixelsize=13:slant=normal:width=normal:hinting=true:hintstyle=hintfull\
	  :scalable=true:autohint=false:antialias=true" :frames t)
	#+end_src
	
	Also looking at the font `founders grotesk mono` for small letters

* Minibuffer
** Remove line number, retain column number in minibuffer
	#+begin_src emacs-lisp
	(line-number-mode -1)
	(column-number-mode 1)
	#+end_src

** NNNnnyan
#+begin_src emacs-lisp

	(use-package nyan-mode
	:ensure t)

  (setq nyan-animate-nyancat t)
  (setq nyan-wavy-trail t)
  (setq nyan-bar-length 17)
  (setq nyan-animation-frame-interval 0.05)

  (if (display-graphic-p)
       (nyan-mode 1)
	    )

#+end_src

* ERC
#+begin_src emacs-lisp
  ;; Notify when /notice to me
  (setq erc-echo-notices-in-minibuffer-flag t)
#+end_src

* Other
** Epub reading
#+begin_src emacs-lisp
	 (use-package nov :ensure t)
	 (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

	 ;; Setup font for epubs
	 (defun my-nov-font-setup ()
	 (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
																:height 1.0))
	 (add-hook 'nov-mode-hook 'my-nov-font-setup)

	 ;; Set text width
	 (setq nov-text-width 60)

#+end_src

* Annotate.el
#+begin_src emacs-lisp
  ;; Allows annotation
  (use-package annotate :ensure t)
  (setq annotate-file "~/.backups-emacs/annotations")

  ;; C-c C-a to annotate or edit existing region
  ;; C-c ] jump to next or ] to previous
#+end_src

* Snippets
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t)
  (use-package yasnippet-snippets :ensure t)
  (yas-global-mode)

#+end_src

* Centered-cursor.el
#+begin_src emacs-lisp
(use-package centered-cursor-mode
	 :ensure t)

#+end_src

* Spell checking
M-tab to cycle through corrections
#+begin_src emacs-lisp
  ;; (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; (setq ispell-dictionary "british")
#+end_src
* DONE Toggle truncate lines on prog mode
* TODO add breadcrumbs in the minibuffer for current file.
* TODO Put colors to the sides. as representation of open buffers.
	- then upon hover or C-x- C-b, ibuffer will show as a side bar.
	  Just like microsoft edge side bar tabs

* TODO snippets
* TODO Set different font for non-prog-mode buffers
* DONE Evil set different states for different modes (eshell, novel)
